import tkinter as tk
import csv
from tkcalendar import Calendar
from tkinter import messagebox
from tkcalendar import DateEntry
from dateutil.relativedelta import relativedelta
from datetime import date, datetime
from tkinter import simpledialog

app = tk.Tk()
app.title("To Do List")



def remove_task():
    try:
        selected_task_index = task_listbox.curselection()[0]
        task_listbox.delete(selected_task_index)
    except IndexError:
        messagebox.showwarning("Warning", "You must select a task to remove.")

def update_task():
   try:
       task = task.get()
       #category=category_entry.get()
       #date = calendar.get_date()
       selected_task_index = task_listbox.curselection()[0]
       for selected_task_index in task_listbox:
           task_listbox.delete(selected_task_index)
           task_listbox.insert(tk.END, f"{date}: {task}")
   except IndexError:
       messagebox.showwarning("Warning", "You must select a task to update.")

def time_values_start():
    times1 = []
    postfix = 'AM'
    for minute in range(0, 1440):
        if minute >= 720:
            postfix = 'PM'
        hour = minute // 60
        minutes = minute - (hour * 60)
        if hour < 10:
            hour = f'0{hour}'
        if minutes < 10:
            minutes = f'0{minutes}'
        times1.append(f'{hour}:{minutes} {postfix}')
    return times1

def time_values_end():
    times2 = []
    postfix = 'AM'
    for minute in range(0, 1440):
        if minute >= 720:
            postfix = 'PM'
        hour = minute // 60
        minutes = minute - (hour * 60)
        if hour < 10:
            hour = f'0{hour}'
        if minutes < 10:
            minutes = f'0{minutes}'
        times2.append(f'{hour}:{minutes} {postfix}')
    return times2

def open_form():
    form_window = tk.Toplevel(app)
    form_window.title("Input Form")

    tk.Label(form_window, text="Task Name:").grid(row=0, column=0, padx=10, pady=10)
    task_name_entry = tk.Entry(form_window)

    task_name_entry.grid(row=0, column=1, padx=10, pady=10)

    tk.Label(form_window, text="Date:").grid(row=1, column=0, padx=10, pady=10)
    date_entry = tk.Entry(form_window)
    date_entry.insert(0, calendar.get_date())
    date_entry.grid(row=1, column=1, padx=10, pady=10)

    tk.Label(form_window, text="Category:").grid(row=2, column=0, padx=10, pady=10)
    category_entry = tk.Entry(form_window)
    category_entry.grid(row=2, column=1, padx=10, pady=10)

    tk.Label(form_window, text="Description:").grid(row=3, column=0, padx=10, pady=10)
    description_entry = tk.Entry(form_window)
    description_entry.grid(row=3, column=1, padx=10, pady=10)

    tk.Label(form_window, text="Start time:").grid(row=4, column=0, padx=10, pady=10)
    start_entry = tk.Entry(form_window)
    start_entry.insert(0,str(start_time.get()))
    start_entry.grid(row=4, column=1, padx=10, pady=10)

    tk.Label(form_window, text="End time:").grid(row=5, column=0, padx=10, pady=10)
    end_entry = tk.Entry(form_window)
    end_entry.insert(0,str(end_time.get()))
    end_entry.grid(row=5, column=1, padx=10, pady=10)


    submit_button = tk.Button(form_window, text="Submit",
                          command=lambda: submit_form(task_name_entry.get(), date_entry.get(), category_entry.get(),
                                                      description_entry.get(), start_entry.get(), end_entry.get()))
    submit_button.grid(row=6, column=1, pady=10)

def submit_form(name, date, category, task_description, start_time, end_time):
    task=f"Task Name: {name}, Date: {date}, Category: {category}, Description: {task_description}, Start time: {start_time}, End time: {end_time}"
    task_listbox.insert(0, task)
    

calendar = Calendar(app, selectmode='day')
calendar.grid(padx=10, pady=10, columnspan=3)

task_listbox = tk.Listbox(app, width=50, height=10)
task_listbox.grid(row=4, padx=10, pady=10, columnspan=3)


add_task_button = tk.Button(app, text="Add Task", command=open_form)
add_task_button.grid(column=0, row=3, padx=5, pady=5)

tk.Label(app, text="Start time:").grid(row=1, column=0, padx=10, pady=10)

start_time = tk.Spinbox(app, wrap=True, repeatinterval=10, values=time_values_start())
start_time.grid(column=1, row=1, padx=5, pady=5)

tk.Label(app, text="End time:").grid(row=2, column=0, padx=10, pady=10)

end_time=tk.Spinbox(app,wrap=True, repeatinterval=10, values=time_values_end())
end_time.grid(column=1, row=2, padx=5, pady=5)

remove_task_button = tk.Button(app, text="Remove Task", command=remove_task)
remove_task_button.grid(column=1, row=3, padx=5, pady=5)

update_task_button = tk.Button(app, text="Update Task", command=update_task)
update_task_button.grid(column=2, row=3, padx=5, pady=5)


app.mainloop()
